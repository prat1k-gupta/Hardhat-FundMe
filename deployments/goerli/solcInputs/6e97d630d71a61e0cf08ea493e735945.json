{
  "language": "Solidity",
  "sources": {
    "contracts/Fundme.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8; \n\n//To Do \n//Get funds from users \n//withdraw funds \n//set a minimum funding value in USD\n\n\nimport \"./PriceConverter.sol\";\ncontract FundMe{\n    \n    address private immutable i_owner; \n\n    AggregatorV3Interface private s_priceFeed; \n    // we gonna pass priceFeed to the constructor\n\n    using PriceConverter for uint256; \n    \n    uint256 public constant MINIMUM_USD = 50 * 1e18; \n    //address is a data type\n    address[] private s_funders; \n\n    mapping(address => uint256) private s_addressToAmount; \n\n    //it's like middleware \n    modifier onlyOwner{ \n        require(i_owner == msg.sender, \"fuck off , baap ko bulake lao\"); \n        _; \n    }\n\n    constructor(address s_priceFeedAddress) { \n        i_owner = msg.sender; \n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress); \n    }\n\n\n    receive() external payable{\n        fund();  \n    }\n\n    //if the calldata not find the appropriate function we access the fall back function \n    fallback() external payable{\n        fund(); \n    }\n\n    //payable means you need to also send some value \n    function fund() public payable{\n        //want to be able to set a minimum fund amount \n        // 1. How do we send Eth to this contract \n        //msg.value is in WEI that is 10^18 wei == 1 eth\n        require(msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD, \"Didn't send enough!\");\n        s_funders.push(msg.sender);\n        s_addressToAmount[msg.sender] = msg.value; \n        //1e18 is 10^18 in wei that is 1 ethereum \n        //if the value didn't met the condition then it will revert and undo any changes \n        //that happened in contract \n\n        // function getConversionRate() public {}\n\n    }\n\n    function withdraw() public payable onlyOwner {\n        //we will reset the mapping\n        for(uint256 funderIndex = 0; funderIndex<s_funders.length ; funderIndex++){\n            address funder = s_funders[funderIndex]; \n            s_addressToAmount[funder] = 0;\n        }\n\n        //Now we will reset the Array \n        s_funders = new address[](0); \n\n        //withdraw fund from contract \n        //transfer directly revert back \n        //send return bool\n        //call return bool and value\n        \n        //we typecasted msg.sender from address to payable address so that we can transfer the fund\n        // payable(msg.sender).transfer(address(this).balance); \n\n        // //send function \n        // //(this).balance returns the balance of current contract that is FundMe contract\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance); \n        // require(sendSuccess,\"Transfer Failed\");\n\n        //call function\n        (bool sendSuccess, /*bytes memory dataReturned*/) = payable(msg.sender).call{value: address(this).balance}(\"\"); \n        require(sendSuccess,\"Transfer Failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner{\n        address[] memory funders = s_funders; \n        for(uint256 fundersIndex = 0; fundersIndex<funders.length; fundersIndex++){\n            s_addressToAmount[funders[fundersIndex]] = 0; \n        }\n        s_funders = new address[](0);\n\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed\");\n    }  \n\n    //function to get owner\n    function getOwner() public view returns(address){\n        return i_owner; \n    }\n    //function to get funders\n\n    function getFunders(uint256 index) public view returns(address){\n        return s_funders[index];\n    }\n    //function to get address to amount\n    function getAddressToAmount(address funder) public view returns(uint256){\n        return s_addressToAmount[funder]; \n    }\n\n    function getPriceFeed() public view returns(AggregatorV3Interface){\n        return s_priceFeed;\n    }\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\"; \n\nlibrary PriceConverter{\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        //chains: rinkeby, goerli \n        //we need dynamic priceFeed address for different networks \n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        (\n            /*uint80 roundID*/,\n            int256 price,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = priceFeed.latestRoundData();\n        return uint256(price) * 1e10;\n    }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 latestPrice = getPrice(priceFeed); \n        return (ethAmount*latestPrice)/ 1e18; \n    }\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe4c7fa1ec09b0dd8cd9fabab636d6855ba5dea3ee0b39e62c0ca9ebc95e741ff",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1011035",
    "logsBloom": "0x
    "blockHash": "0x7262ec18da8138fdec0dced075c92a62dfe7af4dafba8510702c63c193f2775e",
    "transactionHash": "0xe4c7fa1ec09b0dd8cd9fabab636d6855ba5dea3ee0b39e62c0ca9ebc95e741ff",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1011035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6e97d630d71a61e0cf08ea493e735945",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Fundme.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/Fundme.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8; \\n\\n//To Do \\n//Get funds from users \\n//withdraw funds \\n//set a minimum funding value in USD\\n\\n\\nimport \\\"./PriceConverter.sol\\\";\\ncontract FundMe{\\n    \\n    address private immutable i_owner; \\n\\n    AggregatorV3Interface private s_priceFeed; \\n    // we gonna pass priceFeed to the constructor\\n\\n    using PriceConverter for uint256; \\n    \\n    uint256 public constant MINIMUM_USD = 50 * 1e18; \\n    //address is a data type\\n    address[] private s_funders; \\n\\n    mapping(address => uint256) private s_addressToAmount; \\n\\n    //it's like middleware \\n    modifier onlyOwner{ \\n        require(i_owner == msg.sender, \\\"fuck off , baap ko bulake lao\\\"); \\n        _; \\n    }\\n\\n    constructor(address s_priceFeedAddress) { \\n        i_owner = msg.sender; \\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress); \\n    }\\n\\n\\n    receive() external payable{\\n        fund();  \\n    }\\n\\n    //if the calldata not find the appropriate function we access the fall back function \\n    fallback() external payable{\\n        fund(); \\n    }\\n\\n    //payable means you need to also send some value \\n    function fund() public payable{\\n        //want to be able to set a minimum fund amount \\n        // 1. How do we send Eth to this contract \\n        //msg.value is in WEI that is 10^18 wei == 1 eth\\n        require(msg.value.getConversionRate(s_priceFeed) > MINIMUM_USD, \\\"Didn't send enough!\\\");\\n        s_funders.push(msg.sender);\\n        s_addressToAmount[msg.sender] = msg.value; \\n        //1e18 is 10^18 in wei that is 1 ethereum \\n        //if the value didn't met the condition then it will revert and undo any changes \\n        //that happened in contract \\n\\n        // function getConversionRate() public {}\\n\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        //we will reset the mapping\\n        for(uint256 funderIndex = 0; funderIndex<s_funders.length ; funderIndex++){\\n            address funder = s_funders[funderIndex]; \\n            s_addressToAmount[funder] = 0;\\n        }\\n\\n        //Now we will reset the Array \\n        s_funders = new address[](0); \\n\\n        //withdraw fund from contract \\n        //transfer directly revert back \\n        //send return bool\\n        //call return bool and value\\n        \\n        //we typecasted msg.sender from address to payable address so that we can transfer the fund\\n        // payable(msg.sender).transfer(address(this).balance); \\n\\n        // //send function \\n        // //(this).balance returns the balance of current contract that is FundMe contract\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance); \\n        // require(sendSuccess,\\\"Transfer Failed\\\");\\n\\n        //call function\\n        (bool sendSuccess, /*bytes memory dataReturned*/) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\"); \\n        require(sendSuccess,\\\"Transfer Failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders; \\n        for(uint256 fundersIndex = 0; fundersIndex<funders.length; fundersIndex++){\\n            s_addressToAmount[funders[fundersIndex]] = 0; \\n        }\\n        s_funders = new address[](0);\\n\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }  \\n\\n    //function to get owner\\n    function getOwner() public view returns(address){\\n        return i_owner; \\n    }\\n    //function to get funders\\n\\n    function getFunders(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n    //function to get address to amount\\n    function getAddressToAmount(address funder) public view returns(uint256){\\n        return s_addressToAmount[funder]; \\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0x228088651d20a1ce5829ddd7f23e358efbb6bd4e416cd1303d6b9db93e6a761a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\"; \\n\\nlibrary PriceConverter{\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        //chains: rinkeby, goerli \\n        //we need dynamic priceFeed address for different networks \\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n        (\\n            /*uint80 roundID*/,\\n            int256 price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price) * 1e10;\\n    }\\n\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) {\\n        uint256 latestPrice = getPrice(priceFeed); \\n        return (ethAmount*latestPrice)/ 1e18; \\n    }\\n\\n}\",\"keccak256\":\"0x4e34a676272f43339a9b9315b3c578f68a6cfbddb31e9795adf7ad1583c015c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012703803806200127083398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c6110eb62000185600039600081816103380152818161057a015281816105e001526107c301526110eb6000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063c0f8cffc146101745761008e565b80633a7b6c74146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a90565b6102d7565b6040516100cc9190610afe565b60405180910390f35b6100dd61031f565b005b3480156100eb57600080fd5b506100f4610569565b6040516101019190610b28565b60405180910390f35b34801561011657600080fd5b5061011f610576565b60405161012c9190610afe565b60405180910390f35b34801561014157600080fd5b5061014a61059e565b6040516101579190610ba2565b60405180910390f35b6101686101b1565b005b6101726105c7565b005b34801561018057600080fd5b5061019b60048036038101906101969190610be9565b61088f565b6040516101a89190610b28565b60405180910390f35b6802b5e3af16b18800006101ee60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d890919063ffffffff16565b1161022e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022590610c73565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600182815481106102ed576102ec610c93565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610d0e565b60405180910390fd5b60005b600180549050811015610459576000600182815481106103d3576103d2610c93565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045190610d5d565b9150506103b0565b50600067ffffffffffffffff81111561047557610474610da6565b5b6040519080825280602002602001820160405280156104a35781602001602082028036833780820191505090505b50600190805190602001906104b99291906109ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e090610e06565b60006040518083038185875af1925050503d806000811461051d576040519150601f19603f3d011682016040523d82523d6000602084013e610522565b606091505b5050905080610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610e67565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c90610d0e565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068f575b5050505050905060005b815181101561075e5760006002600084848151811061070557610704610c93565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061075690610d5d565b9150506106e3565b50600067ffffffffffffffff81111561077a57610779610da6565b5b6040519080825280602002602001820160405280156107a85781602001602082028036833780820191505090505b50600190805190602001906107be9291906109ae565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080590610e06565b60006040518083038185875af1925050503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b505090508061088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290610ed3565b60405180910390fd5b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108e48361090e565b9050670de0b6b3a764000081856108fb9190610ef3565b6109059190610f7c565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f919061103a565b5050509150506402540be400816109a69190610ef3565b915050919050565b828054828255906000526020600020908101928215610a27579160200282015b82811115610a265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ce565b5b509050610a349190610a38565b5090565b5b80821115610a51576000816000905550600101610a39565b5090565b600080fd5b6000819050919050565b610a6d81610a5a565b8114610a7857600080fd5b50565b600081359050610a8a81610a64565b92915050565b600060208284031215610aa657610aa5610a55565b5b6000610ab484828501610a7b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b610b2281610a5a565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b6000819050919050565b6000610b68610b63610b5e84610abd565b610b43565b610abd565b9050919050565b6000610b7a82610b4d565b9050919050565b6000610b8c82610b6f565b9050919050565b610b9c81610b81565b82525050565b6000602082019050610bb76000830184610b93565b92915050565b610bc681610add565b8114610bd157600080fd5b50565b600081359050610be381610bbd565b92915050565b600060208284031215610bff57610bfe610a55565b5b6000610c0d84828501610bd4565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610c5d601383610c16565b9150610c6882610c27565b602082019050919050565b60006020820190508181036000830152610c8c81610c50565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6675636b206f6666202c2062616170206b6f2062756c616b65206c616f000000600082015250565b6000610cf8601d83610c16565b9150610d0382610cc2565b602082019050919050565b60006020820190508181036000830152610d2781610ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6882610a5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9b57610d9a610d2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df0600083610dd5565b9150610dfb82610de0565b600082019050919050565b6000610e1182610de3565b9150819050919050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000610e51600f83610c16565b9150610e5c82610e1b565b602082019050919050565b60006020820190508181036000830152610e8081610e44565b9050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610ebd600f83610c16565b9150610ec882610e87565b602082019050919050565b60006020820190508181036000830152610eec81610eb0565b9050919050565b6000610efe82610a5a565b9150610f0983610a5a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4257610f41610d2e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8782610a5a565b9150610f9283610a5a565b925082610fa257610fa1610f4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fcc81610fad565b8114610fd757600080fd5b50565b600081519050610fe981610fc3565b92915050565b6000819050919050565b61100281610fef565b811461100d57600080fd5b50565b60008151905061101f81610ff9565b92915050565b60008151905061103481610a64565b92915050565b600080600080600060a0868803121561105657611055610a55565b5b600061106488828901610fda565b955050602061107588828901611010565b945050604061108688828901611025565b935050606061109788828901611025565b92505060806110a888828901610fda565b915050929550929590935056fea264697066735822122052a4393bb703ceb5157f62fa1a5a280be140087fe51741eb758fe0fb4fdc797b64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063c0f8cffc146101745761008e565b80633a7b6c74146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a90565b6102d7565b6040516100cc9190610afe565b60405180910390f35b6100dd61031f565b005b3480156100eb57600080fd5b506100f4610569565b6040516101019190610b28565b60405180910390f35b34801561011657600080fd5b5061011f610576565b60405161012c9190610afe565b60405180910390f35b34801561014157600080fd5b5061014a61059e565b6040516101579190610ba2565b60405180910390f35b6101686101b1565b005b6101726105c7565b005b34801561018057600080fd5b5061019b60048036038101906101969190610be9565b61088f565b6040516101a89190610b28565b60405180910390f35b6802b5e3af16b18800006101ee60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d890919063ffffffff16565b1161022e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022590610c73565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600182815481106102ed576102ec610c93565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a490610d0e565b60405180910390fd5b60005b600180549050811015610459576000600182815481106103d3576103d2610c93565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045190610d5d565b9150506103b0565b50600067ffffffffffffffff81111561047557610474610da6565b5b6040519080825280602002602001820160405280156104a35781602001602082028036833780820191505090505b50600190805190602001906104b99291906109ae565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e090610e06565b60006040518083038185875af1925050503d806000811461051d576040519150601f19603f3d011682016040523d82523d6000602084013e610522565b606091505b5050905080610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90610e67565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c90610d0e565b60405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068f575b5050505050905060005b815181101561075e5760006002600084848151811061070557610704610c93565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808061075690610d5d565b9150506106e3565b50600067ffffffffffffffff81111561077a57610779610da6565b5b6040519080825280602002602001820160405280156107a85781602001602082028036833780820191505090505b50600190805190602001906107be9291906109ae565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080590610e06565b60006040518083038185875af1925050503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b505090508061088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290610ed3565b60405180910390fd5b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806108e48361090e565b9050670de0b6b3a764000081856108fb9190610ef3565b6109059190610f7c565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f919061103a565b5050509150506402540be400816109a69190610ef3565b915050919050565b828054828255906000526020600020908101928215610a27579160200282015b82811115610a265782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ce565b5b509050610a349190610a38565b5090565b5b80821115610a51576000816000905550600101610a39565b5090565b600080fd5b6000819050919050565b610a6d81610a5a565b8114610a7857600080fd5b50565b600081359050610a8a81610a64565b92915050565b600060208284031215610aa657610aa5610a55565b5b6000610ab484828501610a7b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b610b2281610a5a565b82525050565b6000602082019050610b3d6000830184610b19565b92915050565b6000819050919050565b6000610b68610b63610b5e84610abd565b610b43565b610abd565b9050919050565b6000610b7a82610b4d565b9050919050565b6000610b8c82610b6f565b9050919050565b610b9c81610b81565b82525050565b6000602082019050610bb76000830184610b93565b92915050565b610bc681610add565b8114610bd157600080fd5b50565b600081359050610be381610bbd565b92915050565b600060208284031215610bff57610bfe610a55565b5b6000610c0d84828501610bd4565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610c5d601383610c16565b9150610c6882610c27565b602082019050919050565b60006020820190508181036000830152610c8c81610c50565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6675636b206f6666202c2062616170206b6f2062756c616b65206c616f000000600082015250565b6000610cf8601d83610c16565b9150610d0382610cc2565b602082019050919050565b60006020820190508181036000830152610d2781610ceb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6882610a5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9b57610d9a610d2e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df0600083610dd5565b9150610dfb82610de0565b600082019050919050565b6000610e1182610de3565b9150819050919050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000610e51600f83610c16565b9150610e5c82610e1b565b602082019050919050565b60006020820190508181036000830152610e8081610e44565b9050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610ebd600f83610c16565b9150610ec882610e87565b602082019050919050565b60006020820190508181036000830152610eec81610eb0565b9050919050565b6000610efe82610a5a565b9150610f0983610a5a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4257610f41610d2e565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8782610a5a565b9150610f9283610a5a565b925082610fa257610fa1610f4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fcc81610fad565b8114610fd757600080fd5b50565b600081519050610fe981610fc3565b92915050565b6000819050919050565b61100281610fef565b811461100d57600080fd5b50565b60008151905061101f81610ff9565b92915050565b60008151905061103481610a64565b92915050565b600080600080600060a0868803121561105657611055610a55565b5b600061106488828901610fda565b955050602061107588828901611010565b945050604061108688828901611025565b935050606061109788828901611025565b92505060806110a888828901610fda565b915050929550929590935056fea264697066735822122052a4393bb703ceb5157f62fa1a5a280be140087fe51741eb758fe0fb4fdc797b64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Fundme.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 64,
        "contract": "contracts/Fundme.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/Fundme.sol:FundMe",
        "label": "s_addressToAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}